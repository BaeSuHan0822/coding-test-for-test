# 문제: 인접 행렬을 이용한 그래프 탐색 (DFS)
#
# 주어진 인접 행렬을 이용해 그래프를 탐색하는 문제입니다.
# 그래프의 노드 번호는 0부터 시작하며, 인접 행렬에서 graph[i][j] == 1이면 
# 노드 i와 노드 j가 연결되어 있다는 의미이고, graph[i][j] == 0이면 연결되지 않았다는 뜻입니다.
# 이 문제는 DFS(깊이 우선 탐색)를 사용해 그래프를 탐색하고, 모든 노드를 방문하는 것이 목표입니다.
#
# DFS 알고리즘:
# 1. 시작 노드에서 출발하여 연결된 노드를 깊게 탐색합니다.
# 2. 한 노드를 방문한 후, 그 노드와 연결된 다른 노드를 방문하되, 이미 방문한 노드는 다시 방문하지 않도록 처리합니다.
# 3. 방문한 노드를 출력하거나 방문 순서를 기록해두면 됩니다.

# 입력 예시:
# 5
# 0 1 1 0 0
# 1 0 1 1 0
# 1 1 0 1 1
# 0 1 1 0 1
# 0 0 1 1 0
#
# 첫 번째 숫자 5는 그래프에 노드가 5개 있다는 의미입니다.
# 그 뒤에 나온 5x5 행렬은 인접 행렬이고, 행렬에서 graph[i][j] == 1이면 i번 노드와 j번 노드가 연결된 것입니다.
#
# 출력 예시:
# 0 1 2 3 4
#
# DFS를 수행한 결과, 0번 노드부터 시작해서 연결된 모든 노드를 방문 순서대로 출력하면 됩니다.

n = int(input())
answer = []
graph = [list(map(int,input().split())) for _ in range(n)]
visited = [False] * n

def dfs(c) :
    answer.append(c)
    visited[c] = True

    for index,i in enumerate(graph[c]) :
        if i == 1 and not visited[index]  :
            dfs(index)

    return answer

print(*dfs(0))